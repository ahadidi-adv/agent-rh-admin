import streamlit as st
import requests
import json
import os
import base64
from datetime import datetime
import pandas as pd
import PyPDF2  # Biblioth√®que pour manipuler les PDF
import io  # Pour manipuler les fichiers en m√©moire
import time  # Pour ajouter des d√©lais si n√©cessaire
import zipfile  # Pour cr√©er des archives ZIP
import gc  # Pour le garbage collector
import sys  # Pour acc√©der aux r√©f√©rences d'objets

st.set_page_config(
    page_title="Payfit - R√©cup√©ration des bulletins de paie",
    page_icon="üìÑ",
    layout="wide"
)

# Fonction pour t√©l√©charger un fichier
def get_binary_file_downloader_html(bin_file, file_label):
    with open(bin_file, 'rb') as f:
        data = f.read()
    b64 = base64.b64encode(data).decode()
    href = f'<a href="data:application/pdf;base64,{b64}" download="{os.path.basename(bin_file)}">T√©l√©charger {file_label}</a>'
    return href

# Fonction pour cr√©er un ZIP en m√©moire avec tous les bulletins
def create_zip_in_memory(payslip_data):
    # Cr√©er un buffer en m√©moire pour le ZIP
    zip_buffer = io.BytesIO()
    
    # Cr√©er le ZIP directement en m√©moire
    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for name, data in payslip_data.items():
            # Ajouter chaque bulletin au ZIP
            zipf.writestr(data["file_name"], data["content"])
    
    # Revenir au d√©but du buffer
    zip_buffer.seek(0)
    return zip_buffer.getvalue()

# Fonction pour extraire la 2√®me page d'un PDF et la renvoyer comme contenu binaire
def extract_second_page(pdf_content):
    try:
        # Utiliser un objet BytesIO pour manipuler le PDF en m√©moire sans fichier temporaire
        input_pdf = io.BytesIO(pdf_content)
        
        # Lire le PDF depuis la m√©moire
        pdf_reader = PyPDF2.PdfReader(input_pdf)
        
        # V√©rifier si le PDF a au moins 2 pages
        if len(pdf_reader.pages) < 2:
            st.warning("Le fichier n'a qu'une seule page.")
            return None
        
        # Cr√©er un nouveau PDF avec seulement la 2√®me page
        pdf_writer = PyPDF2.PdfWriter()
        pdf_writer.add_page(pdf_reader.pages[1])  # Ajouter la 2√®me page (index 1)
        
        # √âcrire le nouveau PDF dans un BytesIO
        output_pdf = io.BytesIO()
        pdf_writer.write(output_pdf)
        output_pdf.seek(0)  # Revenir au d√©but du buffer
        
        return output_pdf.getvalue()  # Retourner le contenu binaire
    except Exception as e:
        st.error(f"Erreur lors de l'extraction de la 2√®me page: {str(e)}")
        return None

# Fonction pour cr√©er un bouton de t√©l√©chargement CSV (√† l'ext√©rieur du form)
def create_csv_download(df, filename):
    csv = df.to_csv(index=False).encode('utf-8')
    return csv, filename

# Fonction pour v√©rifier la pr√©sence de la cl√© API en m√©moire
def check_api_key_in_memory():
    # Forcer le garbage collector √† nettoyer les objets non r√©f√©renc√©s
    gc.collect()
    
    # V√©rifier si 'api_key' est dans les variables locales ou globales
    api_key_in_locals = 'api_key' in locals()
    api_key_in_globals = 'api_key' in globals()
    
    # Rechercher dans toutes les r√©f√©rences d'objets (plus approfondi)
    api_key_refs = []
    for obj in gc.get_objects():
        try:
            if isinstance(obj, str) and len(obj) > 20 and 'api' in obj.lower():
                api_key_refs.append(obj)
        except:
            pass
    
    results = {
        "API Key dans variables locales": api_key_in_locals,
        "API Key dans variables globales": api_key_in_globals,
        "Nombre de r√©f√©rences potentielles √† API Key": len(api_key_refs)
    }
    
    return results

# Fonction principale pour r√©cup√©rer les bulletins de paie
def get_payslips(api_key, target_year, target_month):
    # Validation des entr√©es
    if not api_key or not target_year or not target_month:
        st.error("Tous les champs sont obligatoires!")
        return
    
    BASE_URL = "https://partner-api.payfit.com"
    
    headers_json = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {api_key}'
    }
    headers_auth = {
        'Authorization': f'Bearer {api_key}'
    }
    
    # Afficher une barre de progression
    progress_bar = st.progress(0)
    status_placeholder = st.empty()
    
    # 1. V√©rification de la cl√© API
    status_placeholder.info("üîé V√©rification de la cl√© API...")
    resp = requests.post("https://oauth.payfit.com/introspect", headers=headers_json, data=json.dumps({"token": api_key}))
    
    try:
        data = resp.json()
        if not data.get("active"):
            st.error("‚ùå Cl√© API invalide ou expir√©e.")
            return
        
        company_id = data["company_id"]
        status_placeholder.success(f"‚úÖ Cl√© valide. Entreprise ID : {company_id}")
        progress_bar.progress(10)
        
        # 2. Infos d√©taill√©es de l'entreprise
        company_info = requests.get(f"{BASE_URL}/companies/{company_id}", headers=headers_auth).json()
        
        with st.expander("üè¢ Informations d√©taill√©es de l'entreprise", expanded=True):
            col1, col2 = st.columns(2)
            with col1:
                st.write(f"**Nom de l'entreprise:** {company_info['name']}")
                st.write(f"**ID de l'entreprise:** {company_id}")
                st.write(f"**Contrats actifs:** {company_info['nbActiveContracts']}")
            with col2:
                if 'countryCode' in company_info:
                    st.write(f"**Pays:** {company_info['countryCode']}")
                if 'city' in company_info:
                    st.write(f"**Ville:** {company_info['city']}")
                if 'postalCode' in company_info:
                    st.write(f"**Code postal:** {company_info['postalCode']}")
            
            # Autres informations disponibles dans company_info
            st.subheader("Informations suppl√©mentaires")
            remaining_info = {k: v for k, v in company_info.items() 
                             if k not in ['name', 'countryCode', 'city', 'postalCode', 'nbActiveContracts']}
            st.json(remaining_info)
        
        progress_bar.progress(20)
        
        # 3. R√©cup√©ration des collaborateurs avec pagination
        status_placeholder.info("üì• R√©cup√©ration des collaborateurs...")
        all_collabs = []
        next_page_token = None
        
        page_count = 0
        while True:
            page_count += 1
            params = {"nextPageToken": next_page_token} if next_page_token else {}
            response = requests.get(f"{BASE_URL}/companies/{company_id}/collaborators", headers=headers_auth, params=params)
            
            if response.status_code != 200:
                st.error(f"‚ùå Erreur lors de la r√©cup√©ration des collaborateurs: {response.status_code}")
                break
            
            collabs_response = response.json()
            page_collabs = collabs_response.get("collaborators", [])
            all_collabs.extend(page_collabs)
            
            # Mise √† jour du statut avec la pagination
            status_placeholder.info(f"üì• R√©cup√©ration des collaborateurs... Page {page_count} ({len(all_collabs)} collaborateurs jusqu'√† pr√©sent)")
            
            next_page_token = collabs_response.get("meta", {}).get("nextPageToken")
            if not next_page_token:
                break  # Sortie de boucle si plus de pages
        
        collabs = all_collabs
        status_placeholder.success(f"‚úÖ {len(collabs)} collaborateurs r√©cup√©r√©s.")
        progress_bar.progress(30)
        
        # Affichage de tous les collaborateurs avec plus d'informations
        with st.expander("üë• Liste compl√®te des collaborateurs", expanded=True):
            if collabs:
                # Pr√©paration des donn√©es pour le tableau
                collabs_data = []
                for collab in collabs:
                    collab_data = {
                        "ID": collab.get("id", ""),
                        "Pr√©nom": collab.get("firstName", ""),
                        "Nom": collab.get("lastName", ""),
                        "Email": collab.get("email", ""),
                        "Statut": "Actif" if collab.get("status") == "active" else "Inactif"
                    }
                    # Ajouter d'autres champs s'ils existent
                    if "startDate" in collab:
                        collab_data["Date de d√©but"] = collab["startDate"]
                    if "endDate" in collab:
                        collab_data["Date de fin"] = collab["endDate"]
                    
                    collabs_data.append(collab_data)
                
                # Cr√©ation du DataFrame pour affichage
                df = pd.DataFrame(collabs_data)
                st.dataframe(df, use_container_width=True)
                
                # Pr√©paration des donn√©es pour le bouton de t√©l√©chargement (mais ne pas cr√©er le bouton ici)
                csv_data, csv_filename = create_csv_download(
                    df, 
                    f"collaborateurs_{company_info['name']}_{datetime.now().strftime('%Y%m%d')}.csv"
                )
                
                # Stockage des donn√©es dans session_state pour utilisation externe au formulaire
                st.session_state.csv_data = csv_data
                st.session_state.csv_filename = csv_filename
                st.session_state.show_download_button = True
            else:
                st.warning("Aucun collaborateur trouv√©.")
                st.session_state.show_download_button = False
        
        # Cr√©ation du dossier de sortie si n√©cessaire (pour le ZIP)
        os.makedirs("bulletins_paie", exist_ok=True)
        
        # 4. Filtrage + extraction
        status_placeholder.info("üîç Recherche des bulletins de paie...")
        
        collabs_with_payslip = []
        collabs_without_payslip = []
        payslip_data = {}  # Dictionnaire pour stocker les donn√©es des PDF au lieu de les t√©l√©charger automatiquement
        
        with st.expander("D√©tails du traitement", expanded=False):
            details_placeholder = st.empty()
            detail_text = ""
        
        total_collabs = len(collabs)
        for i, collab in enumerate(collabs):
            # Mise √† jour de la progression
            progress_value = 30 + (i / total_collabs * 60)
            progress_bar.progress(int(progress_value))
            
            collaborator_id = collab["id"]
            full_name = f"{collab.get('firstName', '')} {collab.get('lastName', '')}".strip()
            
            detail_text += f"Traitement de {full_name}...\n"
            details_placeholder.text_area("Logs", detail_text, height=400)
            
            payslips_url = f"{BASE_URL}/companies/{company_id}/collaborators/{collaborator_id}/payslips/"
            payslip_resp = requests.get(payslips_url, headers=headers_auth).json()
            
            if "payslips" not in payslip_resp or not payslip_resp["payslips"]:
                collabs_without_payslip.append({
                    "name": full_name,
                    "id": collaborator_id,
                    "reason": "Aucun bulletin disponible"
                })
                detail_text += f"  ‚Üí Aucun bulletin disponible\n"
                details_placeholder.text_area("Logs", detail_text, height=400)
                continue
            
            # Recherche d'un bulletin correspondant √† la p√©riode demand√©e
            target_payslip = next(
                (p for p in payslip_resp["payslips"] if p["year"] == target_year and p["month"] == target_month),
                None
            )
            
            if target_payslip:
                collabs_with_payslip.append({
                    "name": full_name,
                    "id": collaborator_id,
                    "payslip_info": target_payslip
                })
                detail_text += f"  ‚Üí ‚úÖ Bulletin trouv√© pour {target_month}/{target_year}\n"
                details_placeholder.text_area("Logs", detail_text, height=400)
                
                contract_id = target_payslip["contractId"]
                payslip_id = target_payslip["payslipId"]
                
                pdf_url = f"{BASE_URL}/companies/{company_id}/collaborators/{collaborator_id}/contracts/{contract_id}/payslips/{payslip_id}"
                pdf_response = requests.get(pdf_url, headers={**headers_auth, 'accept': 'application/pdf'})
                
                if pdf_response.status_code == 200:
                    file_safe_name = f"{collab.get('firstName', 'collaborateur')}_{collab.get('lastName', '')}".replace(" ", "_")
                    
                    # Nom du fichier sans "page2"
                    file_name = f"{file_safe_name}_{target_year}_{target_month}.pdf"
                    
                    # Extraire la 2√®me page et la stocker en m√©moire
                    extracted_content = extract_second_page(pdf_response.content)
                    if extracted_content:
                        # Stockage des donn√©es de page 2 dans un dictionnaire
                        payslip_data[full_name] = {
                            "file_name": file_name,
                            "content": extracted_content
                        }
                        detail_text += f"  ‚Üí ‚úÖ 2√®me page extraite et pr√™te pour t√©l√©chargement\n"
                    else:
                        detail_text += f"  ‚Üí ‚ö†Ô∏è Impossible d'extraire la 2√®me page\n"
                else:
                    detail_text += f"  ‚Üí ‚ùå Erreur lors du t√©l√©chargement du bulletin de paie (code {pdf_response.status_code})\n"
                
                details_placeholder.text_area("Logs", detail_text, height=400)
            else:
                collabs_without_payslip.append({
                    "name": full_name,
                    "id": collaborator_id,
                    "reason": f"Pas de bulletin pour {target_month}/{target_year}",
                    "available_periods": [f"{p['month']}/{p['year']}" for p in payslip_resp["payslips"]]
                })
                detail_text += f"  ‚Üí Pas de bulletin pour {target_month}/{target_year}\n"
                details_placeholder.text_area("Logs", detail_text, height=400)
        
        progress_bar.progress(100)
        status_placeholder.success("‚úÖ Traitement termin√©!")
        
        # Stockage des donn√©es des bulletins dans la session_state
        st.session_state.payslip_data = payslip_data
        st.session_state.collabs_with_payslip = collabs_with_payslip
        st.session_state.collabs_without_payslip = collabs_without_payslip
        st.session_state.target_year = target_year
        st.session_state.target_month = target_month
        st.session_state.show_results = True
        
        # Pr√©parer le ZIP en m√©moire pour le t√©l√©chargement en une √©tape
        if payslip_data:
            # Cr√©er le contenu ZIP en m√©moire
            zip_content = create_zip_in_memory(payslip_data)
            # Stocker dans session_state
            st.session_state.zip_content = zip_content
            st.session_state.zip_filename = f"bulletins_paie_{target_year}_{target_month}.zip"
        
    except Exception as e:
        st.error(f"Une erreur est survenue: {str(e)}")
        import traceback
        st.error(traceback.format_exc())
        st.session_state.traitement_termine = False
        st.session_state.show_results = False

# Initialisation des variables de session si elles n'existent pas
if 'show_download_button' not in st.session_state:
    st.session_state.show_download_button = False
if 'traitement_termine' not in st.session_state:
    st.session_state.traitement_termine = False
if 'payslip_data' not in st.session_state:
    st.session_state.payslip_data = {}
if 'show_results' not in st.session_state:
    st.session_state.show_results = False
if 'collabs_with_payslip' not in st.session_state:
    st.session_state.collabs_with_payslip = []
if 'collabs_without_payslip' not in st.session_state:
    st.session_state.collabs_without_payslip = []
if 'zip_content' not in st.session_state:
    st.session_state.zip_content = None
if 'zip_filename' not in st.session_state:
    st.session_state.zip_filename = ""
if 'show_debug_mode' not in st.session_state:
    st.session_state.show_debug_mode = False
if 'memory_check_results' not in st.session_state:
    st.session_state.memory_check_results = None

# Interface utilisateur
st.title("üìÑ R√©cup√©ration des bulletins de paie Payfit")
st.write("Cet outil vous permet de t√©l√©charger la deuxi√®me page des bulletins de paie de vos collaborateurs pour un mois sp√©cifique et d'obtenir des informations d√©taill√©es sur votre entreprise et vos collaborateurs.")

p="""
# Activer/d√©sactiver le mode debug
with st.expander("üß™ Mode Test - S√©curit√© API Key", expanded=False):
    st.write("Activez ce mode pour v√©rifier si la cl√© API est correctement supprim√©e de la m√©moire apr√®s utilisation.")
    debug_mode = st.checkbox("Activer le mode test de s√©curit√©", value=st.session_state.show_debug_mode)
    st.session_state.show_debug_mode = debug_mode
    
    if st.session_state.memory_check_results:
        st.subheader("R√©sultats du test de s√©curit√©")
        for key, value in st.session_state.memory_check_results.items():
            st.write(f"**{key}:** {value}")
            
        if not any(v == True for v in st.session_state.memory_check_results.values() if isinstance(v, bool)):
            st.success("‚úÖ La cl√© API semble avoir √©t√© correctement supprim√©e de la m√©moire!")
        else:
            st.error("‚ùå La cl√© API pourrait encore √™tre pr√©sente en m√©moire.")
"""
with st.form(key="payslip_form"):
    api_key = st.text_input("üîê Cl√© API Payfit", type="password", help="Vous pouvez obtenir une cl√© API depuis votre compte Payfit")
    
    col1, col2 = st.columns(2)
    with col1:
        current_year = datetime.now().year
        years = list(range(current_year-3, current_year+1))
        target_year = st.selectbox("üìÖ Ann√©e", options=years, index=len(years)-1)
    
    with col2:
        months = [(str(i).zfill(2), datetime(2000, i, 1).strftime("%B")) for i in range(1, 13)]
        current_month = datetime.now().month - 1  # Mois pr√©c√©dent par d√©faut
        target_month = st.selectbox(
            "üìÖ Mois", 
            options=[m[0] for m in months],
            format_func=lambda x: months[int(x)-1][1],
            index=current_month - 1 if current_month > 0 else 0
        )
    
    submit_button = st.form_submit_button(label="üì• R√©cup√©rer les bulletins")
    
    if submit_button:
        get_payslips(api_key, str(target_year), target_month)
        # Suppression s√©curis√©e de la cl√© API de la m√©moire
        del api_key
        
        # V√©rification de la m√©moire si le mode debug est activ√©
        if st.session_state.show_debug_mode:
            st.session_state.memory_check_results = check_api_key_in_memory()
            st.experimental_rerun()  # Recharger pour afficher les r√©sultats

# Bouton de t√©l√©chargement plac√© en dehors du formulaire
if st.session_state.show_download_button and 'csv_data' in st.session_state and 'csv_filename' in st.session_state:
    st.download_button(
        label="üì• T√©l√©charger la liste des collaborateurs (CSV)",
        data=st.session_state.csv_data,
        file_name=st.session_state.csv_filename,
        mime="text/csv",
    )

# Affichage des r√©sultats en dehors du formulaire
if st.session_state.show_results:
    # 5. R√©sum√© des bulletins r√©cup√©r√©s
    st.subheader("üìÑ Bulletins r√©cup√©r√©s")
    
    target_year = st.session_state.target_year
    target_month = st.session_state.target_month
    payslip_data = st.session_state.payslip_data
    collabs_with_payslip = st.session_state.collabs_with_payslip
    collabs_without_payslip = st.session_state.collabs_without_payslip
    
    # Statistiques des bulletins
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total des collaborateurs", len(collabs_with_payslip) + len(collabs_without_payslip))
    with col2:
        st.metric("Bulletins trouv√©s", len(collabs_with_payslip))
    with col3:
        st.metric("Bulletins manquants", len(collabs_without_payslip))
    
    # Affichage des collaborateurs avec bulletins
    if collabs_with_payslip:
        # Bouton pour t√©l√©charger tous les bulletins en une seule √©tape
        if 'zip_content' in st.session_state and st.session_state.zip_content:
            col1, col2 = st.columns([3, 1])
            with col1:
                st.info(f"**{len(collabs_with_payslip)} bulletins trouv√©s pour la p√©riode {target_month}/{target_year}**")
            with col2:
                st.download_button(
                    label="üì• T√©l√©charger tous les bulletins",
                    data=st.session_state.zip_content,
                    file_name=st.session_state.zip_filename,
                    mime="application/zip",
                )
        else:
            st.write(f"**{len(collabs_with_payslip)} bulletins trouv√©s pour la p√©riode {target_month}/{target_year}:**")
        
        st.write("---")
        st.subheader("Bulletins individuels")
        
        # Tableau avec les boutons de t√©l√©chargement individuels
        for name in payslip_data.keys():
            col1, col2 = st.columns([3, 1])
            with col1:
                st.write(f"**{name}**")
            with col2:
                # Bouton de t√©l√©chargement direct depuis la m√©moire via Streamlit
                key = f"dl_btn_{name.replace(' ', '_')}"
                st.download_button(
                    label="T√©l√©charger bulletin de paie",
                    data=payslip_data[name]["content"],
                    file_name=payslip_data[name]["file_name"],
                    mime="application/pdf",
                    key=key
                )
        
        # Option avanc√©e pour cr√©er le ZIP sur disque si n√©cessaire
        with st.expander("‚öôÔ∏è Options avanc√©es", expanded=False):
            st.subheader("Cr√©ation d'une archive ZIP sur disque")
            st.write("Utilisez cette option si vous avez besoin d'une archive ZIP enregistr√©e localement.")
            
            if st.button("Pr√©parer l'archive ZIP sur disque"):
                with st.spinner("Pr√©paration de l'archive ZIP..."):
                    # Cr√©ation d'un ZIP avec tous les bulletins
                    zip_filename = f"bulletins_paie_{target_year}_{target_month}.zip"
                    
                    # Enregistrer temporairement les fichiers pour les ajouter au ZIP
                    temp_files = []
                    for name, data in payslip_data.items():
                        file_path = f"bulletins_paie/{data['file_name']}"
                        with open(file_path, "wb") as f:
                            f.write(data["content"])
                        temp_files.append(file_path)
                    
                    # Cr√©er le ZIP
                    with zipfile.ZipFile(zip_filename, 'w') as zipf:
                        for file_path in temp_files:
                            zipf.write(file_path, arcname=os.path.basename(file_path))
                    
                    # Afficher le lien de t√©l√©chargement
                    st.markdown(get_binary_file_downloader_html(zip_filename, "tous les bulletins (ZIP)"), unsafe_allow_html=True)
    else:
        st.warning("Aucun bulletin trouv√© pour ce mois.")
    
    # 6. Informations sur les collaborateurs sans bulletin
    with st.expander("‚ÑπÔ∏è Collaborateurs sans bulletin pour cette p√©riode", expanded=True):
        if collabs_without_payslip:
            # Pr√©paration des donn√©es pour le tableau
            missing_data = []
            for collab in collabs_without_payslip:
                missing_item = {
                    "Nom": collab["name"],
                    "Raison": collab["reason"]
                }
                if "available_periods" in collab:
                    missing_item["P√©riodes disponibles"] = ", ".join(collab["available_periods"])
                
                missing_data.append(missing_item)
            
            # Cr√©ation du DataFrame pour affichage
            df_missing = pd.DataFrame(missing_data)
            st.dataframe(df_missing, use_container_width=True)
        else:
            st.success("Tous les collaborateurs ont un bulletin pour cette p√©riode!")
    
    # 7. Historique des bulletins disponibles est int√©gr√© directement dans la fonction get_payslips pour simplifier

# Aide et instructions
with st.expander("‚ÑπÔ∏è Comment utiliser cet outil"):
    st.write("""
    1. **Obtenir une cl√© API Payfit** : Connectez-vous √† votre compte administrateur Payfit et g√©n√©rez une cl√© API.
    2. **S√©lectionner la p√©riode** : Choisissez l'ann√©e et le mois pour lesquels vous souhaitez r√©cup√©rer les bulletins.
    3. **Lancer la r√©cup√©ration** : Cliquez sur le bouton pour commencer le processus.
    4. **Explorer les r√©sultats** : Une fois le traitement termin√©, vous pourrez :
       - Voir les informations d√©taill√©es de votre entreprise
       - Consulter la liste compl√®te de vos collaborateurs
       - T√©l√©charger tous les bulletins en une seule fois avec un clic
       - T√©l√©charger les bulletins individuellement
       - Voir quels collaborateurs n'ont pas de bulletin pour la p√©riode s√©lectionn√©e
    """)

st.divider()
st.write("**Note :** Seules les 2√®mes pages des bulletins de paie sont extraites et disponibles pour t√©l√©chargement. Les bulletins complets ne sont pas stock√©s localement.")